# Copyright 2021 VMware
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#


# `app-deploy` instantiates a `kapp-ctrl/App` making use of an image that comes
# as input in the form of `$(images.image.image)$`.
#
# the use of `App` here is important because of how `knative` updates the
# knative service under the hood to include some extra annotations that _can't_
# be mutated once applied by knative's controller. As `kapp` is able to be
# configured to not patch certain features (something `cartographer` can't
# yet), we're able to bridge that gap with the use of `kapp-ctrl/App`.
#
#
apiVersion: carto.run/v1alpha1
kind: ClusterTemplate
metadata:
  name: containerapp-deploy
spec:
  template:
    apiVersion: kappctrl.k14s.io/v1alpha1
    kind: App
    metadata:
      name: $(workload.metadata.name)$
    spec:
      cluster:
        namespace: k8se-apps
        kubeconfigSecretRef:
          name: customer-aks  
          key: kubeconfig
      fetch:
        - inline:
            paths:
              manifest.yml: |
                apiVersion: v1
                kind: Namespace
                metadata:
                    name: <insert-namespace-name-here>
                ---
                apiVersion: k8se.microsoft.com/v1alpha1
                kind: ContainerApp
                metadata:
                  name: $(workload.metadata.name)$
                spec:
                  configuration:
                    ingress:
                      allowInsecure: true
                      external: true
                      targetPort: 8080
                  template:
                    containers:
                    - env:
                      - name: HTTP_PORT
                        secretRef: ""
                        value: "8080"
                      - name: $(workload.spec.env[0].name)$
                        value: "$(workload.spec.env[0].value)$"
                      image: $(images.image.image)$
                      name: $(workload.metadata.name)$
                      resources: {}
      template:
        - ytt: {}
      deploy:
        - kapp: {}
